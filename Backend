const express = require('express');
const bodyParser = require('body-parser');
const { Translate } = require('@google-cloud/translate').v2;
const textToSpeech = require('@google-cloud/text-to-speech');
const speech = require('@google-cloud/speech');
const fs = require('fs');
const util = require('util');

const app = express();
app.use(bodyParser.json());

const translate = new Translate();
const ttsClient = new textToSpeech.TextToSpeechClient();
const speechClient = new speech.SpeechClient();

// Speech-to-Text Endpoint
app.post('/api/speech-to-text', async (req, res) => {
    const audio = req.body.audio; // base64-encoded audio string
    const audioBuffer = Buffer.from(audio, 'base64');

    const request = {
        audio: { content: audioBuffer.toString('base64') },
        config: {
            encoding: 'LINEAR16',
            sampleRateHertz: 16000,
            languageCode: req.body.language || 'en-US',
        },
    };

    try {
        const [response] = await speechClient.recognize(request);
        const transcription = response.results
            .map(result => result.alternatives[0].transcript)
            .join('\n');
        res.json({ transcript: transcription });
    } catch (error) {
        res.status(500).send({ error: error.message });
    }
});

// Translation Endpoint
app.post('/api/translate', async (req, res) => {
    const { text, targetLanguage } = req.body;
    try {
        const [translation] = await translate.translate(text, targetLanguage);
        res.json({ translation });
    } catch (error) {
        res.status(500).send({ error: error.message });
    }
});

// Text-to-Speech Endpoint
app.post('/api/text-to-speech', async (req, res) => {
    const { text, languageCode } = req.body;

    const request = {
        input: { text },
        voice: { languageCode, ssmlGender: 'NEUTRAL' },
        audioConfig: { audioEncoding: 'MP3' },
    };

    try {
        const [response] = await ttsClient.synthesizeSpeech(request);
        const filePath = `audio_${Date.now()}.mp3`;
        await util.promisify(fs.writeFile)(filePath, response.audioContent, 'binary');
        res.json({ audioUrl: filePath });
    } catch (error) {
        res.status(500).send({ error: error.message });
    }
});

// Start server
app.listen(3001, () => {
    console.log('Server running on http://localhost:3001');
});
